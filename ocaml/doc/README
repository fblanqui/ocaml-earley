This directory contains examples of programs making use of the DeCaP library
and pa_ocaml parser to write parsers or syntax extension. This file contains
a quick description of each example, together with usage examples.

==> calc_base.ml

The calc_base program implements a very simple calculator  having  only  two
operations: + and -. The calculation to be done is to be provided as a comm-
and-line argument, and the result is displayed on the standard output.

$> ./calc_base "12 + 18 - 3"
12 + 18 - 3 = 27

==> aabb.ml

The aabb program parses the standard input, and succeeds if an only  if  the
input contains an arbitrary number of times the letter "a" followed by exac-
tly the same number of letter "b" followed by the end of file marker (EOF).

$> echo -n "aaabbb" | ./aabb
$> echo -n "aaaabbb" | ./aabb
parse error after 1:7, 'b' expected

==> calc_prio.ml

The calc_prio program implements a calculator having the four usual operati-
ons: +, -, * and /. The priority of the operations is  the  usual  one,  and
parenthesis can be used to group expressions. This program displays a prompt
in which the user can type calculations. To end the program just hit Ctrl-D.

$> ./calc_prio
>> (12 - 2) / 0.3
33.333333
>> 4 * 3 * 2
24.000000
>> 2 + 3 * 6
20.000000
>> %

==> aabbcc.ml

The aabbcc program is similar to the aabb program. It parses an equal number
of "a", "b" and "c" characters (in this order) on the standard input, or  it
fails with an error.

$> echo -n "aaabbbccc" | ./aabbcc
$> echo -n "aabcc" | ./aabbcc
parse error after 1:3, 'b' expected

==> text.ml

The text program parses text on the standard input, and returns  the  number
of paragraphs read. Paragraphs are separated by a line that does not contain
any text.

$> cat ./README | ./text
16 paragraphs read.
